Problem 1:
1. 10000000000n^(2) vs n^(3)
    n^(3) is greater.
    Although 10000000000n^(2) has a large constant, n^(3) grows at a
    faster rate due to it being a larger exponent.

2. n^(2)log(n) vs n(log(n))^(10)
    n^(2)log(n) is greater.
    The second function can be manipulated into 10nlog(n), which makes
    the comparison much more clear. You can then see n^(2)log(n) grows
    at a faster rate than 10nlog(n) because of its exponent.

3. n^(log(n)) vs 2^(root(n))
    n^(log(n)) is greater.
    First you take the log of both sides so you can bring down the 
    exponent. Resulting in:
    log(n)log(n) vs root(n)log(2)
    log(n)^2 vs root(n)log(2)
    Then we take the log again to bring down the exponenet of the
    first function:
    2log(log(n)) vs log(root(n)log(2))
    By logarithm lawas, we cna isolate our n term:
    2log(log(n)) vs log(root(n)) + log(log(2))
    Here we can see more clearly that the first function grows faster
    than the second.

4. 2^(n) vs 2^(2n)
    2^(2n) is greater.
    This is failry simple as 2n is a greater exponent than n on its own.


Problem 2:
For the below code,

isPrime(n): 
  for(i = 2, i*i <= n; i++) {
    if(n % i == 0) {
      return false
    }
  return true

Best case:
        n is equal to an even number. In this case, the code will return 
        false on the first iteration of the loop. Additionally, an even better
        case is whenever n <= 3, as in that case the for loop will not eve 
        execute as the loop condition will evaluate to false. In both cases, 
        the time cpmplexity would be O(1).

Average case:
        n is a relatively small prime number. In this case, the for loop 
        executes about root(n) times. This is the same as the worst case
        where the time complexity is O(root(n)).

Worst case:
        n is a very large prime number. In this case, the for loop will execute
        many times over. Seeing as the loop condition squares the i variable,
        then the loop executes about root(n) times. The time cpmlexity of this
        case is O(root(n)).
