We can use heaps as PQs(priority queue). For example, if we wanted to simulate a 
PQ of integers that prioritizes based on the smaller value, then we would implement
it as a minheap. The element that would be at the top of the simulated PQ would
then be the root of our minheap. To simulate our queue pop, we would just delete the
root node in our minheap. Pushing elements into our simulated PQ would be
taken care of by our heap property. Essentially, our heap property maintains the
priority of our integer elements.
For example, in our minheap below, deleting our root is the same as popping off the
top of our equivalent PQ

myMinHeap = {1, 4, 5, 8, 12, 6, 9}         // the equivalent PQ is {1, 4, 5, 6, 8, 9, 12}
myMinHeap.delete(0)                        // deleting index of root, same as PQ.pop() = 1
                                           // both remove 1
myMinHeap.delete(0)                        // deleting the root again results in an array {5, 6, 12, 8, 9}
                                           // deleting index of root, same as PQ.pop() = 4
                                           // both remove 4



Seeing as the underlying data structure that maxheaps and minheaps depend on is the same,
an array, I do believe that we can use one as the other and vice versa. All heap operations
will still be available between the two, although some may need additional bits of code.
Lets take heapSort as an example. In a maxheap, heapSort produces an ascending ordered array,
and in a minheap, it produces a descending ordered array. What if we wanted to produce a
descending ordered array using heapSort on a maxheap. This could be accomplished by including
an in place reversal of the product array of heapSort. The in place reversal would take no
additional space, maintaining heapSort's space complexity of O(n). Because the reversal
simply traverses the array at O(n), it would still maintain heapSort's time complexity of
O(nlogn). Below is a pseudocode example of heapSort for a maxheap that produces a descending
ordered array. 



heapSort(A)
  buildHeap(A)
  for i from length(A) to 1
    swap A[0] and A[i]
    heapify
    
  i = length(A) - 1;
  j = 0;
  while(i > j)
  {
    temp = A[i];
    A[i] = A[j];
    A[j] = temp;
    i--;
    j++;
  }
