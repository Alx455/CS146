Problem 1:
1. T(N) = 2T(N-1) + 1
   T(N-1) = 2T(N-2) + 1
   T(N-2) = 2T(N-3) + 1

   T(N) = 2(2T(N-2) + 1) + 1
        = 4T(N-2) + 3
   T(N) = 4(2T(N-3) + 1) + 3
        = 8T(N-3) + 7
   T(N) = 8(2T(N-4) + 1) + 7
        = 16T(N-4) + 15
   Assume N = k
   T(N) = 2^(k)T(N-k) + (2^(k) - 1)
        = 2^(N) + (2^(N) - 1)
   Order of growth: f(n) = 2^(n) + (2^(n) - 1)
  Time complexity: O(2^n)

2. T(N) = 3T(N-1) + N
   Applying Master theorem for decreasing functions case 3:
   k = 1
   T(n) = O(n3^(n))

3. T(N) = 9T(N/2) + n^2
   Applying Master theorem for divide and conquer algorithms case 1:
   k = 2
   T(n) = Theta(n^(log2(9)))
        = Theta (n^(3.17))
         



Problem 2:

