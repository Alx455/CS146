Problem 1:
1. T(N) = 2T(N-1) + 1
   T(N-1) = 2T(N-2) + 1
   T(N-2) = 2T(N-3) + 1

   T(N) = 2(2T(N-2) + 1) + 1
        = 4T(N-2) + 3
   T(N) = 4(2T(N-3) + 1) + 3
        = 8T(N-3) + 7
   T(N) = 8(2T(N-4) + 1) + 7
        = 16T(N-4) + 15
   Assume N = k
   T(N) = 2^(k)T(N-k) + (2^(k) - 1)
        = 2^(N) + (2^(N) - 1)
   Order of growth: f(n) = 2^(n) + (2^(n) - 1)
  Time complexity: O(2^n)

2. T(N) = 3T(N-1) + N
   Applying Master theorem for decreasing functions case 3:
   k = 1
   T(n) = O(n3^(n))

3. T(N) = 9T(N/2) + n^2
   Applying Master theorem for divide and conquer algorithms case 1:
   k = 2
   T(n) = Theta(n^(log2(9)))
        = Theta (n^(3.17))

4. T(N) = 100T(N/2) + n^(log2cn + 1)
   Applying Master theorem for divide and conquer algorithnms case 3:
   T(n) = Theta(n^(log2(cn) + 1))
        = Theta(n^(log2(n) + 1))

5. T(N) = 4T(N/2) + n^(2)logn
   Applying Master theorem for divide and conquer algorithnms case 2:
   k = 2
   p = 1
   T(n) = Theta(n^(log2(4))log2(n))
        = Theta(n^(2)log2(n))

6. T(N) = 5T(N/2) + n^(2)/logn
   Applying Master theorem for divide and conquer algorithnms case 2:
   k = 2
   p = -1
   T(n) = Theta(n^(log2(5))log(log(n)))
        = Theta (n^(2.32)log(log(n)))



Problem 2:

yetAnotherFunc(n): 
  if n > 1: 
    for(i=0;i<10n;i++)
      doSomething;
    yetAnotherFunc(n/2);
    yetAnotherFunc(n/2);

For the above code

